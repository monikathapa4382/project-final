# -*- coding: utf-8 -*-
"""GlobalTrendsUnveiled_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/175pE-QHn0WtjB1yXCAImSHE8G-75W2c4
"""

from google.colab import files

# Upload the file
uploaded = files.upload()

# Check the uploaded files
for filename in uploaded.keys():
    print(f'File "{filename}" uploaded successfully!')
# Import Pandas
import pandas as pd

# Load the dataset
file_name = list(uploaded.keys())[0]
df = pd.read_csv(file_name)

# Display the first few rows of the DataFrame
df.head()

# List of columns to convert to numeric
numeric_columns = ['GDP ($)', 'CO2 emissions per capita (metric tons)', 'Urban population', 'Population', 'Cereal yield (kg per hectare)', 'Invest. in energy w/ private participation ($)', 'Access to improved water source (percent of total pop.)']

# Convert columns to numeric
df[numeric_columns] = df[numeric_columns].apply(pd.to_numeric, errors='coerce')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from sklearn.cluster import KMeans

# Display the columns in the DataFrame
print(df.columns)

from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Select relevant columns for clustering
selected_columns = [
    'GDP ($)',
    'CO2 emissions per capita (metric tons)',
    'Urban population'
]

# Create a subset DataFrame with selected columns
subset_df = df[selected_columns].dropna()

# Normalize the data
scaler = StandardScaler()
normalized_data = scaler.fit_transform(subset_df)

# Perform KMeans clustering
num_clusters = 3  # You can change the number of clusters as needed
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
subset_df['Cluster'] = kmeans.fit_predict(normalized_data)

# Display the clustering results
print(subset_df.head())

"""# Visualize the clustering results
plt.scatter(subset_df['GDP ($)'], subset_df['CO2 emissions per capita (metric tons)'],
            c=subset_df['Cluster'], cmap='viridis', alpha=0.8)
plt.title('KMeans Clustering')
plt.xlabel('GDP ($)')
plt.ylabel('CO2 emissions per capita (metric tons)')
plt.show()

"""

import seaborn as sns
import matplotlib.pyplot as plt

# Set dark background style
sns.set(style='darkgrid')

# Example: Hexbin plot for CO2 emissions per capita vs. GDP
plt.figure(figsize=(10, 6))
sns.scatterplot(x='GDP ($)', y='CO2 emissions per capita (metric tons)', data=subset_df, hue='Cluster', palette='viridis', alpha=0.8)
plt.title('CO2 Emissions per Capita vs. GDP')
plt.xlabel('GDP ($)')
plt.ylabel('CO2 Emissions per Capita (metric tons)')

# Set dark background
plt.style.use('dark_background')

plt.show()

import numpy as np
from sklearn.impute import SimpleImputer

# Replace '?' with NaN
subset_df.replace('?', np.nan, inplace=True)

# Impute missing values with the mean
imputer = SimpleImputer(strategy='mean')
subset_df_imputed = pd.DataFrame(imputer.fit_transform(subset_df[selected_columns]), columns=selected_columns)

# Normalize the data
scaler = StandardScaler()
normalized_data = scaler.fit_transform(subset_df_imputed)

# Perform KMeans clustering
num_clusters = 3
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
subset_df_imputed['Cluster'] = kmeans.fit_predict(normalized_data)

# Display the clustering results
print(subset_df_imputed.head())

# Visualize the clustering results
plt.scatter(subset_df_imputed['GDP ($)'], subset_df_imputed['CO2 emissions per capita (metric tons)'],
            c=subset_df_imputed['Cluster'], cmap='viridis', alpha=0.8)
plt.title('KMeans Clustering')
plt.xlabel('GDP ($)')
plt.ylabel('CO2 emissions per capita (metric tons)')
plt.show()

print(subset_df_imputed.columns)

# Visualize population trends in each cluster
plt.figure(figsize=(12, 8))

for cluster_label in range(num_clusters):
    cluster_data = subset_df_imputed[subset_df_imputed['Cluster'] == cluster_label]
    plt.scatter(cluster_data['GDP ($)'], cluster_data['Urban population'], label=f'Cluster {cluster_label}')

plt.title('Population Trends in Clusters')
plt.xlabel('GDP ($)')
plt.ylabel('Population')
plt.legend()
plt.show()

import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt

# Select relevant columns for clustering (replace with your selected columns)
selected_columns = [
    'GDP ($)',
    'CO2 emissions per capita (metric tons)',
    'Urban population',
    'Population',
    'Cereal yield (kg per hectare)',
    'Invest. in energy w/ private participation ($)',
    'Access to improved water source (percent of total pop.)'
]

subset_df = df[selected_columns].replace('?', np.nan).dropna()

# Convert columns to numeric
subset_df[selected_columns] = subset_df[selected_columns].apply(pd.to_numeric, errors='coerce')

# Impute missing values with the mean
imputer = SimpleImputer(strategy='mean')
subset_df_imputed = pd.DataFrame(imputer.fit_transform(subset_df), columns=selected_columns)

# Normalize the data
scaler = StandardScaler()
normalized_data = scaler.fit_transform(subset_df_imputed)

# Perform KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=42)
subset_df_imputed['Cluster'] = kmeans.fit_predict(normalized_data)

# Visualize clustering results
plt.figure(figsize=(12, 8))
plt.scatter(subset_df_imputed['GDP ($)'], subset_df_imputed['CO2 emissions per capita (metric tons)'],
            c=subset_df_imputed['Cluster'], cmap='viridis', alpha=0.7)
plt.xlabel('GDP ($)')
plt.ylabel('CO2 emissions per capita (metric tons)')
plt.title('Clustering Results')
plt.colorbar(label='Cluster')
plt.show()

from scipy.optimize import curve_fit

# Define a simple model (you can choose a different model based on your data)
def simple_model(x, a, b):
    return a * x + b

# Fit the model to your data
x_data = subset_df_imputed['GDP ($)']
y_data = subset_df_imputed['CO2 emissions per capita (metric tons)']

params, covariance = curve_fit(simple_model, x_data, y_data)

# Generate predictions
x_range = np.linspace(min(x_data), max(x_data), 100)
y_pred = simple_model(x_range, *params)

# Plot the data and the fitted model
plt.figure(figsize=(12, 8))
plt.scatter(x_data, y_data, label='Data', alpha=0.7)
plt.plot(x_range, y_pred, color='red', label='Fitted Model')
plt.xlabel('GDP ($)')
plt.ylabel('CO2 emissions per capita (metric tons)')
plt.title('Fitted Model for GDP vs CO2 Emissions per Capita')
plt.legend()
plt.show()

# Visualization 2: Bar Plot of Mean CO2 Emissions per Cluster
mean_co2_per_cluster = subset_df_imputed.groupby('Cluster')['CO2 emissions per capita (metric tons)'].mean()

plt.figure(figsize=(10, 6))
mean_co2_per_cluster.plot(kind='bar', color='skyblue')
plt.xlabel('Cluster')
plt.ylabel('Mean CO2 Emissions per Capita (metric tons)')
plt.title('Mean CO2 Emissions per Capita by Cluster')
plt.xticks(rotation=0)
plt.show()

print(subset_df.columns)



